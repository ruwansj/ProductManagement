@model IEnumerable<ProductManagement.Core.Entities.Product>
@{
    ViewData["Title"] = "Product Management";
}

<div class="container-fluid p-4">

    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="display-5 mb-0">Product Management</h1>
            <p class="text-muted">Manage your products inventory</p>
        </div>
        <div class="d-flex gap-2">
            <a asp-action="Create" class="btn btn-primary">
                <i class="bi bi-plus-circle me-2"></i>Add New Product
            </a>
            <a asp-action="Report" class="btn btn-info text-white">
                <i class="bi bi-graph-up me-2"></i>Analytics Report
            </a>
        </div>
    </div>

    <!-- Messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-2"></i>@TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Products -->
    <div class="card shadow-sm">
        <div class="card-header bg-light py-3">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Products List</h5>
                </div>
                <div class="col-auto">
                    <input type="text" id="productSearch" class="form-control" placeholder="Search products...">
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="productsTable">
                    <thead class="table-light">
                        <tr>
                            <th class="border-0">@Html.DisplayNameFor(model => model.Name)</th>
                            <th class="border-0">@Html.DisplayNameFor(model => model.Category)</th>
                            <th class="border-0">@Html.DisplayNameFor(model => model.Price)</th>
                            <th class="border-0">@Html.DisplayNameFor(model => model.Stock)</th>
                            <th class="border-0">Total Value</th>
                            <th class="border-0">Status</th>
                            <th class="border-0 text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            var totalValue = item.Price * item.Stock;
                            var stockStatus = item.Stock switch
                            {
                                0 => "bg-danger",
                                <= 10 => "bg-warning",
                                _ => "bg-success"
                            };

                            <tr>
                                <td class="align-middle">@item.Name</td>
                                <td class="align-middle">
                                    <span class="badge bg-secondary">@item.Category</span>
                                </td>
                                <td class="align-middle">@item.Price.ToString("C2")</td>
                                <td class="align-middle">@item.Stock</td>
                                <td class="align-middle">@totalValue.ToString("C2")</td>
                                <td class="align-middle">
                                    <div class="d-flex align-items-center">
                                        <span class="badge @stockStatus">
                                            @(item.Stock switch
                                            {
                                                0 => "Out of Stock",
                                                <= 10 => "Low Stock",
                                                _ => "In Stock"
                                            })
                                        </span>
                                    </div>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-pencil-square"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-danger delete-product"
                                            data-id="@item.Id" data-name="@item.Name">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirm -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <span id="productName" class="fw-bold"></span>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize DataTable
            const table = $('#productsTable').DataTable({
                pageLength: 10,
                lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                order: [[0, 'asc']],
                responsive: true,
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>rtip'
            });

            // Product Search
            $('#productSearch').on('keyup', function () {
                table.search(this.value).draw();
            });

            // Delete Product
            let productToDelete = null;
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));

            $('.delete-product').click(function () {
                productToDelete = $(this).data('id');
                const productName = $(this).data('name');
                $('#productName').text(productName);
                deleteModal.show();
            });

            $('#confirmDelete').click(function () {
                if (productToDelete) {
                    $.post('/Product/Delete/' + productToDelete, {
                        '__RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    })
                        .done(function () {
                            table.row($(`button[data-id="${productToDelete}"]`).closest('tr'))
                                .remove()
                                .draw();

                            // Show success toast
                            const toast = new bootstrap.Toast($('<div class="toast" role="alert">' +
                                '<div class="toast-header bg-success text-white">' +
                                '<strong class="me-auto">Success</strong>' +
                                '<button type="button" class="btn-close" data-bs-dismiss="toast"></button>' +
                                '</div>' +
                                '<div class="toast-body">Product deleted successfully!</div>' +
                                '</div>')[0]);

                            $('.toast-container').append(toast);
                            toast.show();

                            deleteModal.hide();
                        })
                        .fail(function () {
                            alert('Failed to delete product. Please try again.');
                        });
                }
            });

            // Clear productToDelete when modal is hidden
            $('#deleteModal').on('hidden.bs.modal', function () {
                productToDelete = null;
            });
        });
    </script>
}

@* @section Styles {
    <style>
        .table th {
            font-weight: 600;
        }

        .badge {
            font-weight: 500;
            padding: 0.5em 0.75em;
        }

        .btn-group .btn {
            padding: 0.25rem 0.5rem;
        }

        .table> :not(caption)>*>* {
            padding: 1rem;
        }
    </style>
} *@